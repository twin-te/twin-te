// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file donation/v1/type.proto (package donation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { RFC3339DateTime, UUID } from "../../shared/type_pb.js";

/**
 * @generated from enum donation.v1.PaymentType
 */
export enum PaymentType {
  /**
   * @generated from enum value: PAYMENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PAYMENT_TYPE_ONE_TIME = 1;
   */
  ONE_TIME = 1,

  /**
   * @generated from enum value: PAYMENT_TYPE_SUBSCRIPTION = 2;
   */
  SUBSCRIPTION = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PaymentType)
proto3.util.setEnumType(PaymentType, "donation.v1.PaymentType", [
  { no: 0, name: "PAYMENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "PAYMENT_TYPE_ONE_TIME" },
  { no: 2, name: "PAYMENT_TYPE_SUBSCRIPTION" },
]);

/**
 * @generated from enum donation.v1.PaymentStatus
 */
export enum PaymentStatus {
  /**
   * @generated from enum value: PAYMENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PAYMENT_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: PAYMENT_STATUS_CANCELED = 2;
   */
  CANCELED = 2,

  /**
   * @generated from enum value: PAYMENT_STATUS_SUCCEEDED = 3;
   */
  SUCCEEDED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PaymentStatus)
proto3.util.setEnumType(PaymentStatus, "donation.v1.PaymentStatus", [
  { no: 0, name: "PAYMENT_STATUS_UNSPECIFIED" },
  { no: 1, name: "PAYMENT_STATUS_PENDING" },
  { no: 2, name: "PAYMENT_STATUS_CANCELED" },
  { no: 3, name: "PAYMENT_STATUS_SUCCEEDED" },
]);

/**
 * @generated from message donation.v1.PaymentUser
 */
export class PaymentUser extends Message<PaymentUser> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: shared.UUID user_id = 2;
   */
  userId?: UUID;

  /**
   * @generated from field: optional string display_name = 3;
   */
  displayName?: string;

  /**
   * @generated from field: optional string link = 4;
   */
  link?: string;

  constructor(data?: PartialMessage<PaymentUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "donation.v1.PaymentUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "message", T: UUID },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentUser {
    return new PaymentUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentUser {
    return new PaymentUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentUser {
    return new PaymentUser().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentUser | PlainMessage<PaymentUser> | undefined, b: PaymentUser | PlainMessage<PaymentUser> | undefined): boolean {
    return proto3.util.equals(PaymentUser, a, b);
  }
}

/**
 * @generated from message donation.v1.PaymentHistory
 */
export class PaymentHistory extends Message<PaymentHistory> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: donation.v1.PaymentType type = 2;
   */
  type = PaymentType.UNSPECIFIED;

  /**
   * @generated from field: donation.v1.PaymentStatus status = 3;
   */
  status = PaymentStatus.UNSPECIFIED;

  /**
   * @generated from field: int32 amount = 4;
   */
  amount = 0;

  /**
   * @generated from field: shared.RFC3339DateTime created_at = 5;
   */
  createdAt?: RFC3339DateTime;

  constructor(data?: PartialMessage<PaymentHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "donation.v1.PaymentHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(PaymentType) },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(PaymentStatus) },
    { no: 4, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "created_at", kind: "message", T: RFC3339DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentHistory {
    return new PaymentHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentHistory {
    return new PaymentHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentHistory {
    return new PaymentHistory().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentHistory | PlainMessage<PaymentHistory> | undefined, b: PaymentHistory | PlainMessage<PaymentHistory> | undefined): boolean {
    return proto3.util.equals(PaymentHistory, a, b);
  }
}

/**
 * @generated from message donation.v1.SubscriptionPlan
 */
export class SubscriptionPlan extends Message<SubscriptionPlan> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 amount = 3;
   */
  amount = 0;

  constructor(data?: PartialMessage<SubscriptionPlan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "donation.v1.SubscriptionPlan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionPlan {
    return new SubscriptionPlan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionPlan {
    return new SubscriptionPlan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionPlan {
    return new SubscriptionPlan().fromJsonString(jsonString, options);
  }

  static equals(a: SubscriptionPlan | PlainMessage<SubscriptionPlan> | undefined, b: SubscriptionPlan | PlainMessage<SubscriptionPlan> | undefined): boolean {
    return proto3.util.equals(SubscriptionPlan, a, b);
  }
}

/**
 * @generated from message donation.v1.Subscription
 */
export class Subscription extends Message<Subscription> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: donation.v1.SubscriptionPlan plan = 2;
   */
  plan?: SubscriptionPlan;

  /**
   * @generated from field: bool is_active = 3;
   */
  isActive = false;

  /**
   * @generated from field: shared.RFC3339DateTime created_at = 4;
   */
  createdAt?: RFC3339DateTime;

  constructor(data?: PartialMessage<Subscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "donation.v1.Subscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plan", kind: "message", T: SubscriptionPlan },
    { no: 3, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "created_at", kind: "message", T: RFC3339DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription {
    return new Subscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription | PlainMessage<Subscription> | undefined, b: Subscription | PlainMessage<Subscription> | undefined): boolean {
    return proto3.util.equals(Subscription, a, b);
  }
}

/**
 * @generated from message donation.v1.Contributor
 */
export class Contributor extends Message<Contributor> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: optional string link = 2;
   */
  link?: string;

  constructor(data?: PartialMessage<Contributor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "donation.v1.Contributor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contributor {
    return new Contributor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contributor {
    return new Contributor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contributor {
    return new Contributor().fromJsonString(jsonString, options);
  }

  static equals(a: Contributor | PlainMessage<Contributor> | undefined, b: Contributor | PlainMessage<Contributor> | undefined): boolean {
    return proto3.util.equals(Contributor, a, b);
  }
}

