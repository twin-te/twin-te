// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: timetable/v1/type.proto

package timetablev1

import (
	sharedpb "github.com/twin-te/twin-te/back/handler/api/v4/rpcgen/sharedpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Module int32

const (
	Module_MODULE_UNSPECIFIED     Module = 0
	Module_MODULE_SPRING_A        Module = 1
	Module_MODULE_SPRING_B        Module = 2
	Module_MODULE_SPRING_C        Module = 3
	Module_MODULE_FALL_A          Module = 4
	Module_MODULE_FALL_B          Module = 5
	Module_MODULE_FALL_C          Module = 6
	Module_MODULE_SUMMER_VACATION Module = 7
	Module_MODULE_SPRING_VACATION Module = 8
)

// Enum value maps for Module.
var (
	Module_name = map[int32]string{
		0: "MODULE_UNSPECIFIED",
		1: "MODULE_SPRING_A",
		2: "MODULE_SPRING_B",
		3: "MODULE_SPRING_C",
		4: "MODULE_FALL_A",
		5: "MODULE_FALL_B",
		6: "MODULE_FALL_C",
		7: "MODULE_SUMMER_VACATION",
		8: "MODULE_SPRING_VACATION",
	}
	Module_value = map[string]int32{
		"MODULE_UNSPECIFIED":     0,
		"MODULE_SPRING_A":        1,
		"MODULE_SPRING_B":        2,
		"MODULE_SPRING_C":        3,
		"MODULE_FALL_A":          4,
		"MODULE_FALL_B":          5,
		"MODULE_FALL_C":          6,
		"MODULE_SUMMER_VACATION": 7,
		"MODULE_SPRING_VACATION": 8,
	}
)

func (x Module) Enum() *Module {
	p := new(Module)
	*p = x
	return p
}

func (x Module) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Module) Descriptor() protoreflect.EnumDescriptor {
	return file_timetable_v1_type_proto_enumTypes[0].Descriptor()
}

func (Module) Type() protoreflect.EnumType {
	return &file_timetable_v1_type_proto_enumTypes[0]
}

func (x Module) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Module.Descriptor instead.
func (Module) EnumDescriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{0}
}

type Day int32

const (
	Day_DAY_UNSPECIFIED Day = 0
	Day_DAY_SUN         Day = 1
	Day_DAY_MON         Day = 2
	Day_DAY_TUE         Day = 3
	Day_DAY_WED         Day = 4
	Day_DAY_THU         Day = 5
	Day_DAY_FRI         Day = 6
	Day_DAY_SAT         Day = 7
	Day_DAY_INTENSIVE   Day = 8
	Day_DAY_APPOINTMENT Day = 9
	Day_DAY_ANY_TIME    Day = 10
	Day_DAY_NT          Day = 11
)

// Enum value maps for Day.
var (
	Day_name = map[int32]string{
		0:  "DAY_UNSPECIFIED",
		1:  "DAY_SUN",
		2:  "DAY_MON",
		3:  "DAY_TUE",
		4:  "DAY_WED",
		5:  "DAY_THU",
		6:  "DAY_FRI",
		7:  "DAY_SAT",
		8:  "DAY_INTENSIVE",
		9:  "DAY_APPOINTMENT",
		10: "DAY_ANY_TIME",
		11: "DAY_NT",
	}
	Day_value = map[string]int32{
		"DAY_UNSPECIFIED": 0,
		"DAY_SUN":         1,
		"DAY_MON":         2,
		"DAY_TUE":         3,
		"DAY_WED":         4,
		"DAY_THU":         5,
		"DAY_FRI":         6,
		"DAY_SAT":         7,
		"DAY_INTENSIVE":   8,
		"DAY_APPOINTMENT": 9,
		"DAY_ANY_TIME":    10,
		"DAY_NT":          11,
	}
)

func (x Day) Enum() *Day {
	p := new(Day)
	*p = x
	return p
}

func (x Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Day) Descriptor() protoreflect.EnumDescriptor {
	return file_timetable_v1_type_proto_enumTypes[1].Descriptor()
}

func (Day) Type() protoreflect.EnumType {
	return &file_timetable_v1_type_proto_enumTypes[1]
}

func (x Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Day.Descriptor instead.
func (Day) EnumDescriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{1}
}

type CourseMethod int32

const (
	CourseMethod_COURSE_METHOD_UNSPECIFIED         CourseMethod = 0
	CourseMethod_COURSE_METHOD_ONLINE_ASYNCHRONOUS CourseMethod = 1
	CourseMethod_COURSE_METHOD_ONLINE_SYNCHRONOUS  CourseMethod = 2
	CourseMethod_COURSE_METHOD_FACE_TO_FACE        CourseMethod = 3
	CourseMethod_COURSE_METHOD_OTHERS              CourseMethod = 4
)

// Enum value maps for CourseMethod.
var (
	CourseMethod_name = map[int32]string{
		0: "COURSE_METHOD_UNSPECIFIED",
		1: "COURSE_METHOD_ONLINE_ASYNCHRONOUS",
		2: "COURSE_METHOD_ONLINE_SYNCHRONOUS",
		3: "COURSE_METHOD_FACE_TO_FACE",
		4: "COURSE_METHOD_OTHERS",
	}
	CourseMethod_value = map[string]int32{
		"COURSE_METHOD_UNSPECIFIED":         0,
		"COURSE_METHOD_ONLINE_ASYNCHRONOUS": 1,
		"COURSE_METHOD_ONLINE_SYNCHRONOUS":  2,
		"COURSE_METHOD_FACE_TO_FACE":        3,
		"COURSE_METHOD_OTHERS":              4,
	}
)

func (x CourseMethod) Enum() *CourseMethod {
	p := new(CourseMethod)
	*p = x
	return p
}

func (x CourseMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_timetable_v1_type_proto_enumTypes[2].Descriptor()
}

func (CourseMethod) Type() protoreflect.EnumType {
	return &file_timetable_v1_type_proto_enumTypes[2]
}

func (x CourseMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseMethod.Descriptor instead.
func (CourseMethod) EnumDescriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{2}
}

type Schedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Module        Module                 `protobuf:"varint,1,opt,name=module,proto3,enum=timetable.v1.Module" json:"module,omitempty"`
	Day           Day                    `protobuf:"varint,2,opt,name=day,proto3,enum=timetable.v1.Day" json:"day,omitempty"`
	Period        int32                  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	Locations     string                 `protobuf:"bytes,4,opt,name=locations,proto3" json:"locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_timetable_v1_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_timetable_v1_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *Schedule) GetModule() Module {
	if x != nil {
		return x.Module
	}
	return Module_MODULE_UNSPECIFIED
}

func (x *Schedule) GetDay() Day {
	if x != nil {
		return x.Day
	}
	return Day_DAY_UNSPECIFIED
}

func (x *Schedule) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Schedule) GetLocations() string {
	if x != nil {
		return x.Locations
	}
	return ""
}

type CourseMethodList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []CourseMethod         `protobuf:"varint,1,rep,packed,name=values,proto3,enum=timetable.v1.CourseMethod" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CourseMethodList) Reset() {
	*x = CourseMethodList{}
	mi := &file_timetable_v1_type_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CourseMethodList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseMethodList) ProtoMessage() {}

func (x *CourseMethodList) ProtoReflect() protoreflect.Message {
	mi := &file_timetable_v1_type_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseMethodList.ProtoReflect.Descriptor instead.
func (*CourseMethodList) Descriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{1}
}

func (x *CourseMethodList) GetValues() []CourseMethod {
	if x != nil {
		return x.Values
	}
	return nil
}

type ScheduleList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*Schedule            `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleList) Reset() {
	*x = ScheduleList{}
	mi := &file_timetable_v1_type_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleList) ProtoMessage() {}

func (x *ScheduleList) ProtoReflect() protoreflect.Message {
	mi := &file_timetable_v1_type_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleList.ProtoReflect.Descriptor instead.
func (*ScheduleList) Descriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduleList) GetValues() []*Schedule {
	if x != nil {
		return x.Values
	}
	return nil
}

type Course struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Id                *sharedpb.UUID            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Year              *sharedpb.AcademicYear    `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	Code              string                    `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name              string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Instructors       string                    `protobuf:"bytes,5,opt,name=instructors,proto3" json:"instructors,omitempty"`
	Credit            string                    `protobuf:"bytes,6,opt,name=credit,proto3" json:"credit,omitempty"`
	Overview          string                    `protobuf:"bytes,7,opt,name=overview,proto3" json:"overview,omitempty"`
	Remarks           string                    `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	LastUpdatedAt     *sharedpb.RFC3339DateTime `protobuf:"bytes,9,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	RecommendedGrades []int32                   `protobuf:"varint,10,rep,packed,name=recommended_grades,json=recommendedGrades,proto3" json:"recommended_grades,omitempty"`
	Methods           []CourseMethod            `protobuf:"varint,11,rep,packed,name=methods,proto3,enum=timetable.v1.CourseMethod" json:"methods,omitempty"`
	Schedules         []*Schedule               `protobuf:"bytes,12,rep,name=schedules,proto3" json:"schedules,omitempty"`
	HasParseError     bool                      `protobuf:"varint,13,opt,name=has_parse_error,json=hasParseError,proto3" json:"has_parse_error,omitempty"`
	IsAnnual          bool                      `protobuf:"varint,14,opt,name=is_annual,json=isAnnual,proto3" json:"is_annual,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Course) Reset() {
	*x = Course{}
	mi := &file_timetable_v1_type_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_timetable_v1_type_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *Course) GetId() *sharedpb.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Course) GetYear() *sharedpb.AcademicYear {
	if x != nil {
		return x.Year
	}
	return nil
}

func (x *Course) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Course) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Course) GetInstructors() string {
	if x != nil {
		return x.Instructors
	}
	return ""
}

func (x *Course) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *Course) GetOverview() string {
	if x != nil {
		return x.Overview
	}
	return ""
}

func (x *Course) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Course) GetLastUpdatedAt() *sharedpb.RFC3339DateTime {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Course) GetRecommendedGrades() []int32 {
	if x != nil {
		return x.RecommendedGrades
	}
	return nil
}

func (x *Course) GetMethods() []CourseMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Course) GetSchedules() []*Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Course) GetHasParseError() bool {
	if x != nil {
		return x.HasParseError
	}
	return false
}

func (x *Course) GetIsAnnual() bool {
	if x != nil {
		return x.IsAnnual
	}
	return false
}

// If it has the based course, code is present.
type RegisteredCourse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *sharedpb.UUID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *sharedpb.UUID         `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Year          *sharedpb.AcademicYear `protobuf:"bytes,3,opt,name=year,proto3" json:"year,omitempty"`
	Code          *string                `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Instructors   string                 `protobuf:"bytes,6,opt,name=instructors,proto3" json:"instructors,omitempty"`
	Credit        string                 `protobuf:"bytes,7,opt,name=credit,proto3" json:"credit,omitempty"`
	Methods       []CourseMethod         `protobuf:"varint,8,rep,packed,name=methods,proto3,enum=timetable.v1.CourseMethod" json:"methods,omitempty"`
	Schedules     []*Schedule            `protobuf:"bytes,9,rep,name=schedules,proto3" json:"schedules,omitempty"`
	Memo          string                 `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo,omitempty"`
	Attendance    int32                  `protobuf:"varint,11,opt,name=attendance,proto3" json:"attendance,omitempty"`
	Absence       int32                  `protobuf:"varint,12,opt,name=absence,proto3" json:"absence,omitempty"`
	Late          int32                  `protobuf:"varint,13,opt,name=late,proto3" json:"late,omitempty"`
	TagIds        []*sharedpb.UUID       `protobuf:"bytes,14,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisteredCourse) Reset() {
	*x = RegisteredCourse{}
	mi := &file_timetable_v1_type_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisteredCourse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredCourse) ProtoMessage() {}

func (x *RegisteredCourse) ProtoReflect() protoreflect.Message {
	mi := &file_timetable_v1_type_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredCourse.ProtoReflect.Descriptor instead.
func (*RegisteredCourse) Descriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{4}
}

func (x *RegisteredCourse) GetId() *sharedpb.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RegisteredCourse) GetUserId() *sharedpb.UUID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RegisteredCourse) GetYear() *sharedpb.AcademicYear {
	if x != nil {
		return x.Year
	}
	return nil
}

func (x *RegisteredCourse) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *RegisteredCourse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisteredCourse) GetInstructors() string {
	if x != nil {
		return x.Instructors
	}
	return ""
}

func (x *RegisteredCourse) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *RegisteredCourse) GetMethods() []CourseMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *RegisteredCourse) GetSchedules() []*Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *RegisteredCourse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *RegisteredCourse) GetAttendance() int32 {
	if x != nil {
		return x.Attendance
	}
	return 0
}

func (x *RegisteredCourse) GetAbsence() int32 {
	if x != nil {
		return x.Absence
	}
	return 0
}

func (x *RegisteredCourse) GetLate() int32 {
	if x != nil {
		return x.Late
	}
	return 0
}

func (x *RegisteredCourse) GetTagIds() []*sharedpb.UUID {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *sharedpb.UUID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        *sharedpb.UUID         `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Order         int32                  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_timetable_v1_type_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_timetable_v1_type_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_timetable_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *Tag) GetId() *sharedpb.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Tag) GetUserId() *sharedpb.UUID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

var File_timetable_v1_type_proto protoreflect.FileDescriptor

const file_timetable_v1_type_proto_rawDesc = "" +
	"\n" +
	"\x17timetable/v1/type.proto\x12\ftimetable.v1\x1a\x11shared/type.proto\"\x93\x01\n" +
	"\bSchedule\x12,\n" +
	"\x06module\x18\x01 \x01(\x0e2\x14.timetable.v1.ModuleR\x06module\x12#\n" +
	"\x03day\x18\x02 \x01(\x0e2\x11.timetable.v1.DayR\x03day\x12\x16\n" +
	"\x06period\x18\x03 \x01(\x05R\x06period\x12\x1c\n" +
	"\tlocations\x18\x04 \x01(\tR\tlocations\"F\n" +
	"\x10CourseMethodList\x122\n" +
	"\x06values\x18\x01 \x03(\x0e2\x1a.timetable.v1.CourseMethodR\x06values\">\n" +
	"\fScheduleList\x12.\n" +
	"\x06values\x18\x01 \x03(\v2\x16.timetable.v1.ScheduleR\x06values\"\x89\x04\n" +
	"\x06Course\x12\x1c\n" +
	"\x02id\x18\x01 \x01(\v2\f.shared.UUIDR\x02id\x12(\n" +
	"\x04year\x18\x02 \x01(\v2\x14.shared.AcademicYearR\x04year\x12\x12\n" +
	"\x04code\x18\x03 \x01(\tR\x04code\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vinstructors\x18\x05 \x01(\tR\vinstructors\x12\x16\n" +
	"\x06credit\x18\x06 \x01(\tR\x06credit\x12\x1a\n" +
	"\boverview\x18\a \x01(\tR\boverview\x12\x18\n" +
	"\aremarks\x18\b \x01(\tR\aremarks\x12?\n" +
	"\x0flast_updated_at\x18\t \x01(\v2\x17.shared.RFC3339DateTimeR\rlastUpdatedAt\x12-\n" +
	"\x12recommended_grades\x18\n" +
	" \x03(\x05R\x11recommendedGrades\x124\n" +
	"\amethods\x18\v \x03(\x0e2\x1a.timetable.v1.CourseMethodR\amethods\x124\n" +
	"\tschedules\x18\f \x03(\v2\x16.timetable.v1.ScheduleR\tschedules\x12&\n" +
	"\x0fhas_parse_error\x18\r \x01(\bR\rhasParseError\x12\x1b\n" +
	"\tis_annual\x18\x0e \x01(\bR\bisAnnual\"\xe6\x03\n" +
	"\x10RegisteredCourse\x12\x1c\n" +
	"\x02id\x18\x01 \x01(\v2\f.shared.UUIDR\x02id\x12%\n" +
	"\auser_id\x18\x02 \x01(\v2\f.shared.UUIDR\x06userId\x12(\n" +
	"\x04year\x18\x03 \x01(\v2\x14.shared.AcademicYearR\x04year\x12\x17\n" +
	"\x04code\x18\x04 \x01(\tH\x00R\x04code\x88\x01\x01\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12 \n" +
	"\vinstructors\x18\x06 \x01(\tR\vinstructors\x12\x16\n" +
	"\x06credit\x18\a \x01(\tR\x06credit\x124\n" +
	"\amethods\x18\b \x03(\x0e2\x1a.timetable.v1.CourseMethodR\amethods\x124\n" +
	"\tschedules\x18\t \x03(\v2\x16.timetable.v1.ScheduleR\tschedules\x12\x12\n" +
	"\x04memo\x18\n" +
	" \x01(\tR\x04memo\x12\x1e\n" +
	"\n" +
	"attendance\x18\v \x01(\x05R\n" +
	"attendance\x12\x18\n" +
	"\aabsence\x18\f \x01(\x05R\aabsence\x12\x12\n" +
	"\x04late\x18\r \x01(\x05R\x04late\x12%\n" +
	"\atag_ids\x18\x0e \x03(\v2\f.shared.UUIDR\x06tagIdsB\a\n" +
	"\x05_code\"t\n" +
	"\x03Tag\x12\x1c\n" +
	"\x02id\x18\x01 \x01(\v2\f.shared.UUIDR\x02id\x12%\n" +
	"\auser_id\x18\x02 \x01(\v2\f.shared.UUIDR\x06userId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x14\n" +
	"\x05order\x18\x04 \x01(\x05R\x05order*\xd0\x01\n" +
	"\x06Module\x12\x16\n" +
	"\x12MODULE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fMODULE_SPRING_A\x10\x01\x12\x13\n" +
	"\x0fMODULE_SPRING_B\x10\x02\x12\x13\n" +
	"\x0fMODULE_SPRING_C\x10\x03\x12\x11\n" +
	"\rMODULE_FALL_A\x10\x04\x12\x11\n" +
	"\rMODULE_FALL_B\x10\x05\x12\x11\n" +
	"\rMODULE_FALL_C\x10\x06\x12\x1a\n" +
	"\x16MODULE_SUMMER_VACATION\x10\a\x12\x1a\n" +
	"\x16MODULE_SPRING_VACATION\x10\b*\xbb\x01\n" +
	"\x03Day\x12\x13\n" +
	"\x0fDAY_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aDAY_SUN\x10\x01\x12\v\n" +
	"\aDAY_MON\x10\x02\x12\v\n" +
	"\aDAY_TUE\x10\x03\x12\v\n" +
	"\aDAY_WED\x10\x04\x12\v\n" +
	"\aDAY_THU\x10\x05\x12\v\n" +
	"\aDAY_FRI\x10\x06\x12\v\n" +
	"\aDAY_SAT\x10\a\x12\x11\n" +
	"\rDAY_INTENSIVE\x10\b\x12\x13\n" +
	"\x0fDAY_APPOINTMENT\x10\t\x12\x10\n" +
	"\fDAY_ANY_TIME\x10\n" +
	"\x12\n" +
	"\n" +
	"\x06DAY_NT\x10\v*\xb4\x01\n" +
	"\fCourseMethod\x12\x1d\n" +
	"\x19COURSE_METHOD_UNSPECIFIED\x10\x00\x12%\n" +
	"!COURSE_METHOD_ONLINE_ASYNCHRONOUS\x10\x01\x12$\n" +
	" COURSE_METHOD_ONLINE_SYNCHRONOUS\x10\x02\x12\x1e\n" +
	"\x1aCOURSE_METHOD_FACE_TO_FACE\x10\x03\x12\x18\n" +
	"\x14COURSE_METHOD_OTHERS\x10\x04Bm\n" +
	"\x1bnet.twinte.api.timetable.v1ZNgithub.com/twin-te/twin-te/back/handler/api/v4/rpcgen/timetable/v1;timetablev1b\x06proto3"

var (
	file_timetable_v1_type_proto_rawDescOnce sync.Once
	file_timetable_v1_type_proto_rawDescData []byte
)

func file_timetable_v1_type_proto_rawDescGZIP() []byte {
	file_timetable_v1_type_proto_rawDescOnce.Do(func() {
		file_timetable_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_timetable_v1_type_proto_rawDesc), len(file_timetable_v1_type_proto_rawDesc)))
	})
	return file_timetable_v1_type_proto_rawDescData
}

var file_timetable_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_timetable_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_timetable_v1_type_proto_goTypes = []any{
	(Module)(0),                      // 0: timetable.v1.Module
	(Day)(0),                         // 1: timetable.v1.Day
	(CourseMethod)(0),                // 2: timetable.v1.CourseMethod
	(*Schedule)(nil),                 // 3: timetable.v1.Schedule
	(*CourseMethodList)(nil),         // 4: timetable.v1.CourseMethodList
	(*ScheduleList)(nil),             // 5: timetable.v1.ScheduleList
	(*Course)(nil),                   // 6: timetable.v1.Course
	(*RegisteredCourse)(nil),         // 7: timetable.v1.RegisteredCourse
	(*Tag)(nil),                      // 8: timetable.v1.Tag
	(*sharedpb.UUID)(nil),            // 9: shared.UUID
	(*sharedpb.AcademicYear)(nil),    // 10: shared.AcademicYear
	(*sharedpb.RFC3339DateTime)(nil), // 11: shared.RFC3339DateTime
}
var file_timetable_v1_type_proto_depIdxs = []int32{
	0,  // 0: timetable.v1.Schedule.module:type_name -> timetable.v1.Module
	1,  // 1: timetable.v1.Schedule.day:type_name -> timetable.v1.Day
	2,  // 2: timetable.v1.CourseMethodList.values:type_name -> timetable.v1.CourseMethod
	3,  // 3: timetable.v1.ScheduleList.values:type_name -> timetable.v1.Schedule
	9,  // 4: timetable.v1.Course.id:type_name -> shared.UUID
	10, // 5: timetable.v1.Course.year:type_name -> shared.AcademicYear
	11, // 6: timetable.v1.Course.last_updated_at:type_name -> shared.RFC3339DateTime
	2,  // 7: timetable.v1.Course.methods:type_name -> timetable.v1.CourseMethod
	3,  // 8: timetable.v1.Course.schedules:type_name -> timetable.v1.Schedule
	9,  // 9: timetable.v1.RegisteredCourse.id:type_name -> shared.UUID
	9,  // 10: timetable.v1.RegisteredCourse.user_id:type_name -> shared.UUID
	10, // 11: timetable.v1.RegisteredCourse.year:type_name -> shared.AcademicYear
	2,  // 12: timetable.v1.RegisteredCourse.methods:type_name -> timetable.v1.CourseMethod
	3,  // 13: timetable.v1.RegisteredCourse.schedules:type_name -> timetable.v1.Schedule
	9,  // 14: timetable.v1.RegisteredCourse.tag_ids:type_name -> shared.UUID
	9,  // 15: timetable.v1.Tag.id:type_name -> shared.UUID
	9,  // 16: timetable.v1.Tag.user_id:type_name -> shared.UUID
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_timetable_v1_type_proto_init() }
func file_timetable_v1_type_proto_init() {
	if File_timetable_v1_type_proto != nil {
		return
	}
	file_timetable_v1_type_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_timetable_v1_type_proto_rawDesc), len(file_timetable_v1_type_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_timetable_v1_type_proto_goTypes,
		DependencyIndexes: file_timetable_v1_type_proto_depIdxs,
		EnumInfos:         file_timetable_v1_type_proto_enumTypes,
		MessageInfos:      file_timetable_v1_type_proto_msgTypes,
	}.Build()
	File_timetable_v1_type_proto = out.File
	file_timetable_v1_type_proto_goTypes = nil
	file_timetable_v1_type_proto_depIdxs = nil
}
