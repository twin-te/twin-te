// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: donation/v1/service.proto

package donationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/twin-te/twinte-back/handler/api/rpcgen/donation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// DonationServiceName is the fully-qualified name of the DonationService service.
	DonationServiceName = "donation.v1.DonationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DonationServiceCreateOneTimeCheckoutSessionProcedure is the fully-qualified name of the
	// DonationService's CreateOneTimeCheckoutSession RPC.
	DonationServiceCreateOneTimeCheckoutSessionProcedure = "/donation.v1.DonationService/CreateOneTimeCheckoutSession"
	// DonationServiceCreateSubscriptionCheckoutSessionProcedure is the fully-qualified name of the
	// DonationService's CreateSubscriptionCheckoutSession RPC.
	DonationServiceCreateSubscriptionCheckoutSessionProcedure = "/donation.v1.DonationService/CreateSubscriptionCheckoutSession"
	// DonationServiceGetPaymentUserProcedure is the fully-qualified name of the DonationService's
	// GetPaymentUser RPC.
	DonationServiceGetPaymentUserProcedure = "/donation.v1.DonationService/GetPaymentUser"
	// DonationServiceUpdatePaymentUserProcedure is the fully-qualified name of the DonationService's
	// UpdatePaymentUser RPC.
	DonationServiceUpdatePaymentUserProcedure = "/donation.v1.DonationService/UpdatePaymentUser"
	// DonationServiceGetPaymentHistoriesProcedure is the fully-qualified name of the DonationService's
	// GetPaymentHistories RPC.
	DonationServiceGetPaymentHistoriesProcedure = "/donation.v1.DonationService/GetPaymentHistories"
	// DonationServiceGetSubscriptionsProcedure is the fully-qualified name of the DonationService's
	// GetSubscriptions RPC.
	DonationServiceGetSubscriptionsProcedure = "/donation.v1.DonationService/GetSubscriptions"
	// DonationServiceUnsubscribeProcedure is the fully-qualified name of the DonationService's
	// Unsubscribe RPC.
	DonationServiceUnsubscribeProcedure = "/donation.v1.DonationService/Unsubscribe"
	// DonationServiceGetTotalAmountProcedure is the fully-qualified name of the DonationService's
	// GetTotalAmount RPC.
	DonationServiceGetTotalAmountProcedure = "/donation.v1.DonationService/GetTotalAmount"
	// DonationServiceGetContributorsProcedure is the fully-qualified name of the DonationService's
	// GetContributors RPC.
	DonationServiceGetContributorsProcedure = "/donation.v1.DonationService/GetContributors"
)

// DonationServiceClient is a client for the donation.v1.DonationService service.
type DonationServiceClient interface {
	CreateOneTimeCheckoutSession(context.Context, *connect_go.Request[v1.CreateOneTimeCheckoutSessionRequest]) (*connect_go.Response[v1.CreateOneTimeCheckoutSessionResponse], error)
	CreateSubscriptionCheckoutSession(context.Context, *connect_go.Request[v1.CreateSubscriptionCheckoutSessionRequest]) (*connect_go.Response[v1.CreateSubscriptionCheckoutSessionResponse], error)
	GetPaymentUser(context.Context, *connect_go.Request[v1.GetPaymentUserRequest]) (*connect_go.Response[v1.GetPaymentUserResponse], error)
	UpdatePaymentUser(context.Context, *connect_go.Request[v1.UpdatePaymentUserRequest]) (*connect_go.Response[v1.UpdatePaymentUserResponse], error)
	GetPaymentHistories(context.Context, *connect_go.Request[v1.GetPaymentHistoriesRequest]) (*connect_go.Response[v1.GetPaymentHistoriesResponse], error)
	GetSubscriptions(context.Context, *connect_go.Request[v1.GetSubscriptionsRequest]) (*connect_go.Response[v1.GetSubscriptionsResponse], error)
	Unsubscribe(context.Context, *connect_go.Request[v1.UnsubscribeRequest]) (*connect_go.Response[v1.UnsubscribeResponse], error)
	GetTotalAmount(context.Context, *connect_go.Request[v1.GetTotalAmountRequest]) (*connect_go.Response[v1.GetTotalAmountResponse], error)
	GetContributors(context.Context, *connect_go.Request[v1.GetContributorsRequest]) (*connect_go.Response[v1.GetContributorsResponse], error)
}

// NewDonationServiceClient constructs a client for the donation.v1.DonationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDonationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DonationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &donationServiceClient{
		createOneTimeCheckoutSession: connect_go.NewClient[v1.CreateOneTimeCheckoutSessionRequest, v1.CreateOneTimeCheckoutSessionResponse](
			httpClient,
			baseURL+DonationServiceCreateOneTimeCheckoutSessionProcedure,
			opts...,
		),
		createSubscriptionCheckoutSession: connect_go.NewClient[v1.CreateSubscriptionCheckoutSessionRequest, v1.CreateSubscriptionCheckoutSessionResponse](
			httpClient,
			baseURL+DonationServiceCreateSubscriptionCheckoutSessionProcedure,
			opts...,
		),
		getPaymentUser: connect_go.NewClient[v1.GetPaymentUserRequest, v1.GetPaymentUserResponse](
			httpClient,
			baseURL+DonationServiceGetPaymentUserProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		updatePaymentUser: connect_go.NewClient[v1.UpdatePaymentUserRequest, v1.UpdatePaymentUserResponse](
			httpClient,
			baseURL+DonationServiceUpdatePaymentUserProcedure,
			opts...,
		),
		getPaymentHistories: connect_go.NewClient[v1.GetPaymentHistoriesRequest, v1.GetPaymentHistoriesResponse](
			httpClient,
			baseURL+DonationServiceGetPaymentHistoriesProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getSubscriptions: connect_go.NewClient[v1.GetSubscriptionsRequest, v1.GetSubscriptionsResponse](
			httpClient,
			baseURL+DonationServiceGetSubscriptionsProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		unsubscribe: connect_go.NewClient[v1.UnsubscribeRequest, v1.UnsubscribeResponse](
			httpClient,
			baseURL+DonationServiceUnsubscribeProcedure,
			opts...,
		),
		getTotalAmount: connect_go.NewClient[v1.GetTotalAmountRequest, v1.GetTotalAmountResponse](
			httpClient,
			baseURL+DonationServiceGetTotalAmountProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getContributors: connect_go.NewClient[v1.GetContributorsRequest, v1.GetContributorsResponse](
			httpClient,
			baseURL+DonationServiceGetContributorsProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// donationServiceClient implements DonationServiceClient.
type donationServiceClient struct {
	createOneTimeCheckoutSession      *connect_go.Client[v1.CreateOneTimeCheckoutSessionRequest, v1.CreateOneTimeCheckoutSessionResponse]
	createSubscriptionCheckoutSession *connect_go.Client[v1.CreateSubscriptionCheckoutSessionRequest, v1.CreateSubscriptionCheckoutSessionResponse]
	getPaymentUser                    *connect_go.Client[v1.GetPaymentUserRequest, v1.GetPaymentUserResponse]
	updatePaymentUser                 *connect_go.Client[v1.UpdatePaymentUserRequest, v1.UpdatePaymentUserResponse]
	getPaymentHistories               *connect_go.Client[v1.GetPaymentHistoriesRequest, v1.GetPaymentHistoriesResponse]
	getSubscriptions                  *connect_go.Client[v1.GetSubscriptionsRequest, v1.GetSubscriptionsResponse]
	unsubscribe                       *connect_go.Client[v1.UnsubscribeRequest, v1.UnsubscribeResponse]
	getTotalAmount                    *connect_go.Client[v1.GetTotalAmountRequest, v1.GetTotalAmountResponse]
	getContributors                   *connect_go.Client[v1.GetContributorsRequest, v1.GetContributorsResponse]
}

// CreateOneTimeCheckoutSession calls donation.v1.DonationService.CreateOneTimeCheckoutSession.
func (c *donationServiceClient) CreateOneTimeCheckoutSession(ctx context.Context, req *connect_go.Request[v1.CreateOneTimeCheckoutSessionRequest]) (*connect_go.Response[v1.CreateOneTimeCheckoutSessionResponse], error) {
	return c.createOneTimeCheckoutSession.CallUnary(ctx, req)
}

// CreateSubscriptionCheckoutSession calls
// donation.v1.DonationService.CreateSubscriptionCheckoutSession.
func (c *donationServiceClient) CreateSubscriptionCheckoutSession(ctx context.Context, req *connect_go.Request[v1.CreateSubscriptionCheckoutSessionRequest]) (*connect_go.Response[v1.CreateSubscriptionCheckoutSessionResponse], error) {
	return c.createSubscriptionCheckoutSession.CallUnary(ctx, req)
}

// GetPaymentUser calls donation.v1.DonationService.GetPaymentUser.
func (c *donationServiceClient) GetPaymentUser(ctx context.Context, req *connect_go.Request[v1.GetPaymentUserRequest]) (*connect_go.Response[v1.GetPaymentUserResponse], error) {
	return c.getPaymentUser.CallUnary(ctx, req)
}

// UpdatePaymentUser calls donation.v1.DonationService.UpdatePaymentUser.
func (c *donationServiceClient) UpdatePaymentUser(ctx context.Context, req *connect_go.Request[v1.UpdatePaymentUserRequest]) (*connect_go.Response[v1.UpdatePaymentUserResponse], error) {
	return c.updatePaymentUser.CallUnary(ctx, req)
}

// GetPaymentHistories calls donation.v1.DonationService.GetPaymentHistories.
func (c *donationServiceClient) GetPaymentHistories(ctx context.Context, req *connect_go.Request[v1.GetPaymentHistoriesRequest]) (*connect_go.Response[v1.GetPaymentHistoriesResponse], error) {
	return c.getPaymentHistories.CallUnary(ctx, req)
}

// GetSubscriptions calls donation.v1.DonationService.GetSubscriptions.
func (c *donationServiceClient) GetSubscriptions(ctx context.Context, req *connect_go.Request[v1.GetSubscriptionsRequest]) (*connect_go.Response[v1.GetSubscriptionsResponse], error) {
	return c.getSubscriptions.CallUnary(ctx, req)
}

// Unsubscribe calls donation.v1.DonationService.Unsubscribe.
func (c *donationServiceClient) Unsubscribe(ctx context.Context, req *connect_go.Request[v1.UnsubscribeRequest]) (*connect_go.Response[v1.UnsubscribeResponse], error) {
	return c.unsubscribe.CallUnary(ctx, req)
}

// GetTotalAmount calls donation.v1.DonationService.GetTotalAmount.
func (c *donationServiceClient) GetTotalAmount(ctx context.Context, req *connect_go.Request[v1.GetTotalAmountRequest]) (*connect_go.Response[v1.GetTotalAmountResponse], error) {
	return c.getTotalAmount.CallUnary(ctx, req)
}

// GetContributors calls donation.v1.DonationService.GetContributors.
func (c *donationServiceClient) GetContributors(ctx context.Context, req *connect_go.Request[v1.GetContributorsRequest]) (*connect_go.Response[v1.GetContributorsResponse], error) {
	return c.getContributors.CallUnary(ctx, req)
}

// DonationServiceHandler is an implementation of the donation.v1.DonationService service.
type DonationServiceHandler interface {
	CreateOneTimeCheckoutSession(context.Context, *connect_go.Request[v1.CreateOneTimeCheckoutSessionRequest]) (*connect_go.Response[v1.CreateOneTimeCheckoutSessionResponse], error)
	CreateSubscriptionCheckoutSession(context.Context, *connect_go.Request[v1.CreateSubscriptionCheckoutSessionRequest]) (*connect_go.Response[v1.CreateSubscriptionCheckoutSessionResponse], error)
	GetPaymentUser(context.Context, *connect_go.Request[v1.GetPaymentUserRequest]) (*connect_go.Response[v1.GetPaymentUserResponse], error)
	UpdatePaymentUser(context.Context, *connect_go.Request[v1.UpdatePaymentUserRequest]) (*connect_go.Response[v1.UpdatePaymentUserResponse], error)
	GetPaymentHistories(context.Context, *connect_go.Request[v1.GetPaymentHistoriesRequest]) (*connect_go.Response[v1.GetPaymentHistoriesResponse], error)
	GetSubscriptions(context.Context, *connect_go.Request[v1.GetSubscriptionsRequest]) (*connect_go.Response[v1.GetSubscriptionsResponse], error)
	Unsubscribe(context.Context, *connect_go.Request[v1.UnsubscribeRequest]) (*connect_go.Response[v1.UnsubscribeResponse], error)
	GetTotalAmount(context.Context, *connect_go.Request[v1.GetTotalAmountRequest]) (*connect_go.Response[v1.GetTotalAmountResponse], error)
	GetContributors(context.Context, *connect_go.Request[v1.GetContributorsRequest]) (*connect_go.Response[v1.GetContributorsResponse], error)
}

// NewDonationServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDonationServiceHandler(svc DonationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	donationServiceCreateOneTimeCheckoutSessionHandler := connect_go.NewUnaryHandler(
		DonationServiceCreateOneTimeCheckoutSessionProcedure,
		svc.CreateOneTimeCheckoutSession,
		opts...,
	)
	donationServiceCreateSubscriptionCheckoutSessionHandler := connect_go.NewUnaryHandler(
		DonationServiceCreateSubscriptionCheckoutSessionProcedure,
		svc.CreateSubscriptionCheckoutSession,
		opts...,
	)
	donationServiceGetPaymentUserHandler := connect_go.NewUnaryHandler(
		DonationServiceGetPaymentUserProcedure,
		svc.GetPaymentUser,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	donationServiceUpdatePaymentUserHandler := connect_go.NewUnaryHandler(
		DonationServiceUpdatePaymentUserProcedure,
		svc.UpdatePaymentUser,
		opts...,
	)
	donationServiceGetPaymentHistoriesHandler := connect_go.NewUnaryHandler(
		DonationServiceGetPaymentHistoriesProcedure,
		svc.GetPaymentHistories,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	donationServiceGetSubscriptionsHandler := connect_go.NewUnaryHandler(
		DonationServiceGetSubscriptionsProcedure,
		svc.GetSubscriptions,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	donationServiceUnsubscribeHandler := connect_go.NewUnaryHandler(
		DonationServiceUnsubscribeProcedure,
		svc.Unsubscribe,
		opts...,
	)
	donationServiceGetTotalAmountHandler := connect_go.NewUnaryHandler(
		DonationServiceGetTotalAmountProcedure,
		svc.GetTotalAmount,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	donationServiceGetContributorsHandler := connect_go.NewUnaryHandler(
		DonationServiceGetContributorsProcedure,
		svc.GetContributors,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	return "/donation.v1.DonationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DonationServiceCreateOneTimeCheckoutSessionProcedure:
			donationServiceCreateOneTimeCheckoutSessionHandler.ServeHTTP(w, r)
		case DonationServiceCreateSubscriptionCheckoutSessionProcedure:
			donationServiceCreateSubscriptionCheckoutSessionHandler.ServeHTTP(w, r)
		case DonationServiceGetPaymentUserProcedure:
			donationServiceGetPaymentUserHandler.ServeHTTP(w, r)
		case DonationServiceUpdatePaymentUserProcedure:
			donationServiceUpdatePaymentUserHandler.ServeHTTP(w, r)
		case DonationServiceGetPaymentHistoriesProcedure:
			donationServiceGetPaymentHistoriesHandler.ServeHTTP(w, r)
		case DonationServiceGetSubscriptionsProcedure:
			donationServiceGetSubscriptionsHandler.ServeHTTP(w, r)
		case DonationServiceUnsubscribeProcedure:
			donationServiceUnsubscribeHandler.ServeHTTP(w, r)
		case DonationServiceGetTotalAmountProcedure:
			donationServiceGetTotalAmountHandler.ServeHTTP(w, r)
		case DonationServiceGetContributorsProcedure:
			donationServiceGetContributorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDonationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDonationServiceHandler struct{}

func (UnimplementedDonationServiceHandler) CreateOneTimeCheckoutSession(context.Context, *connect_go.Request[v1.CreateOneTimeCheckoutSessionRequest]) (*connect_go.Response[v1.CreateOneTimeCheckoutSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.CreateOneTimeCheckoutSession is not implemented"))
}

func (UnimplementedDonationServiceHandler) CreateSubscriptionCheckoutSession(context.Context, *connect_go.Request[v1.CreateSubscriptionCheckoutSessionRequest]) (*connect_go.Response[v1.CreateSubscriptionCheckoutSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.CreateSubscriptionCheckoutSession is not implemented"))
}

func (UnimplementedDonationServiceHandler) GetPaymentUser(context.Context, *connect_go.Request[v1.GetPaymentUserRequest]) (*connect_go.Response[v1.GetPaymentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.GetPaymentUser is not implemented"))
}

func (UnimplementedDonationServiceHandler) UpdatePaymentUser(context.Context, *connect_go.Request[v1.UpdatePaymentUserRequest]) (*connect_go.Response[v1.UpdatePaymentUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.UpdatePaymentUser is not implemented"))
}

func (UnimplementedDonationServiceHandler) GetPaymentHistories(context.Context, *connect_go.Request[v1.GetPaymentHistoriesRequest]) (*connect_go.Response[v1.GetPaymentHistoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.GetPaymentHistories is not implemented"))
}

func (UnimplementedDonationServiceHandler) GetSubscriptions(context.Context, *connect_go.Request[v1.GetSubscriptionsRequest]) (*connect_go.Response[v1.GetSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.GetSubscriptions is not implemented"))
}

func (UnimplementedDonationServiceHandler) Unsubscribe(context.Context, *connect_go.Request[v1.UnsubscribeRequest]) (*connect_go.Response[v1.UnsubscribeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.Unsubscribe is not implemented"))
}

func (UnimplementedDonationServiceHandler) GetTotalAmount(context.Context, *connect_go.Request[v1.GetTotalAmountRequest]) (*connect_go.Response[v1.GetTotalAmountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.GetTotalAmount is not implemented"))
}

func (UnimplementedDonationServiceHandler) GetContributors(context.Context, *connect_go.Request[v1.GetContributorsRequest]) (*connect_go.Response[v1.GetContributorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("donation.v1.DonationService.GetContributors is not implemented"))
}
