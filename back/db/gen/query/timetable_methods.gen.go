// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twin-te/back/db/gen/model"
)

func newTimetableMethod(db *gorm.DB, opts ...gen.DOOption) timetableMethod {
	_timetableMethod := timetableMethod{}

	_timetableMethod.timetableMethodDo.UseDB(db, opts...)
	_timetableMethod.timetableMethodDo.UseModel(&model.TimetableMethod{})

	tableName := _timetableMethod.timetableMethodDo.TableName()
	_timetableMethod.ALL = field.NewAsterisk(tableName)
	_timetableMethod.Method = field.NewString(tableName, "method")

	_timetableMethod.fillFieldMap()

	return _timetableMethod
}

type timetableMethod struct {
	timetableMethodDo timetableMethodDo

	ALL    field.Asterisk
	Method field.String

	fieldMap map[string]field.Expr
}

func (t timetableMethod) Table(newTableName string) *timetableMethod {
	t.timetableMethodDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t timetableMethod) As(alias string) *timetableMethod {
	t.timetableMethodDo.DO = *(t.timetableMethodDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *timetableMethod) updateTableName(table string) *timetableMethod {
	t.ALL = field.NewAsterisk(table)
	t.Method = field.NewString(table, "method")

	t.fillFieldMap()

	return t
}

func (t *timetableMethod) WithContext(ctx context.Context) *timetableMethodDo {
	return t.timetableMethodDo.WithContext(ctx)
}

func (t timetableMethod) TableName() string { return t.timetableMethodDo.TableName() }

func (t timetableMethod) Alias() string { return t.timetableMethodDo.Alias() }

func (t timetableMethod) Columns(cols ...field.Expr) gen.Columns {
	return t.timetableMethodDo.Columns(cols...)
}

func (t *timetableMethod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *timetableMethod) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 1)
	t.fieldMap["method"] = t.Method
}

func (t timetableMethod) clone(db *gorm.DB) timetableMethod {
	t.timetableMethodDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t timetableMethod) replaceDB(db *gorm.DB) timetableMethod {
	t.timetableMethodDo.ReplaceDB(db)
	return t
}

type timetableMethodDo struct{ gen.DO }

func (t timetableMethodDo) Debug() *timetableMethodDo {
	return t.withDO(t.DO.Debug())
}

func (t timetableMethodDo) WithContext(ctx context.Context) *timetableMethodDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t timetableMethodDo) ReadDB() *timetableMethodDo {
	return t.Clauses(dbresolver.Read)
}

func (t timetableMethodDo) WriteDB() *timetableMethodDo {
	return t.Clauses(dbresolver.Write)
}

func (t timetableMethodDo) Session(config *gorm.Session) *timetableMethodDo {
	return t.withDO(t.DO.Session(config))
}

func (t timetableMethodDo) Clauses(conds ...clause.Expression) *timetableMethodDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t timetableMethodDo) Returning(value interface{}, columns ...string) *timetableMethodDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t timetableMethodDo) Not(conds ...gen.Condition) *timetableMethodDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t timetableMethodDo) Or(conds ...gen.Condition) *timetableMethodDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t timetableMethodDo) Select(conds ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t timetableMethodDo) Where(conds ...gen.Condition) *timetableMethodDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t timetableMethodDo) Order(conds ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t timetableMethodDo) Distinct(cols ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t timetableMethodDo) Omit(cols ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t timetableMethodDo) Join(table schema.Tabler, on ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t timetableMethodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t timetableMethodDo) RightJoin(table schema.Tabler, on ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t timetableMethodDo) Group(cols ...field.Expr) *timetableMethodDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t timetableMethodDo) Having(conds ...gen.Condition) *timetableMethodDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t timetableMethodDo) Limit(limit int) *timetableMethodDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t timetableMethodDo) Offset(offset int) *timetableMethodDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t timetableMethodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *timetableMethodDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t timetableMethodDo) Unscoped() *timetableMethodDo {
	return t.withDO(t.DO.Unscoped())
}

func (t timetableMethodDo) Create(values ...*model.TimetableMethod) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t timetableMethodDo) CreateInBatches(values []*model.TimetableMethod, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t timetableMethodDo) Save(values ...*model.TimetableMethod) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t timetableMethodDo) First() (*model.TimetableMethod, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimetableMethod), nil
	}
}

func (t timetableMethodDo) Take() (*model.TimetableMethod, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimetableMethod), nil
	}
}

func (t timetableMethodDo) Last() (*model.TimetableMethod, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimetableMethod), nil
	}
}

func (t timetableMethodDo) Find() ([]*model.TimetableMethod, error) {
	result, err := t.DO.Find()
	return result.([]*model.TimetableMethod), err
}

func (t timetableMethodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TimetableMethod, err error) {
	buf := make([]*model.TimetableMethod, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t timetableMethodDo) FindInBatches(result *[]*model.TimetableMethod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t timetableMethodDo) Attrs(attrs ...field.AssignExpr) *timetableMethodDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t timetableMethodDo) Assign(attrs ...field.AssignExpr) *timetableMethodDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t timetableMethodDo) Joins(fields ...field.RelationField) *timetableMethodDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t timetableMethodDo) Preload(fields ...field.RelationField) *timetableMethodDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t timetableMethodDo) FirstOrInit() (*model.TimetableMethod, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimetableMethod), nil
	}
}

func (t timetableMethodDo) FirstOrCreate() (*model.TimetableMethod, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimetableMethod), nil
	}
}

func (t timetableMethodDo) FindByPage(offset int, limit int) (result []*model.TimetableMethod, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t timetableMethodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t timetableMethodDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t timetableMethodDo) Delete(models ...*model.TimetableMethod) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *timetableMethodDo) withDO(do gen.Dao) *timetableMethodDo {
	t.DO = *do.(*gen.DO)
	return t
}
