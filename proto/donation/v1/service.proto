syntax = "proto3";
package donation.v1;

import "donation/v1/type.proto";
import "shared/option.proto";

option go_package = "github.com/twin-te/twinte-back/handler/api/rpcgen/donation/v1;donationv1";

// The following error codes are not stated explicitly in the each rpc, but may be returned.
//   - shared.InvalidArgument
//   - shared.Unauthenticated
//   - shared.Unauthorized
service DonationService {
  rpc CreateOneTimeCheckoutSession(CreateOneTimeCheckoutSessionRequest) returns (CreateOneTimeCheckoutSessionResponse) {
    option (shared.twinte) = {
      authentication: OPTIONAL,
      error_codes: [],
    };
  }

  rpc CreateSubscriptionCheckoutSession(CreateSubscriptionCheckoutSessionRequest) returns (CreateSubscriptionCheckoutSessionResponse) {
    option (shared.twinte) = {
      authentication: REQURED,
      error_codes: [],
    };
  }

  rpc GetPaymentUser(GetPaymentUserRequest) returns (GetPaymentUserResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (shared.twinte) = {
      authentication: REQURED,
      error_codes: [],
    };
  }

  rpc UpdatePaymentUser(UpdatePaymentUserRequest) returns (UpdatePaymentUserResponse) {
    option (shared.twinte) = {
      authentication: REQURED,
      error_codes: [],
    };
  }

  rpc GetPaymentHistories(GetPaymentHistoriesRequest) returns (GetPaymentHistoriesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (shared.twinte) = {
      authentication: REQURED,
      error_codes: [],
    };
  }

  rpc GetSubscriptionPlans(GetSubscriptionPlansRequest) returns (GetSubscriptionPlansResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (shared.twinte) = {
      authentication: NOT_REQURED,
      error_codes: [],
    };
  }

  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (shared.twinte) = {
      authentication: REQURED,
      error_codes: ["donation.SubscriptionNotFound"],
    };
  }

  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse) {
    option (shared.twinte) = {
      authentication: REQURED,
      error_codes: ["donation.SubscriptionNotFound"],
    };
  }

  rpc GetTotalAmount(GetTotalAmountRequest) returns (GetTotalAmountResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (shared.twinte) = {
      authentication: NOT_REQURED,
      error_codes: [],
    };
  }

  rpc GetContributors(GetContributorsRequest) returns (GetContributorsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
    option (shared.twinte) = {
      authentication: NOT_REQURED,
      error_codes: [],
    };
  }
}

message CreateOneTimeCheckoutSessionRequest {
  int32 amount = 1;
}

message CreateOneTimeCheckoutSessionResponse {
  string checkout_session_id = 1;
}

message CreateSubscriptionCheckoutSessionRequest {
  string plan_id = 1;
}

message CreateSubscriptionCheckoutSessionResponse {
  string checkout_session_id = 1;
}

message GetPaymentUserRequest {}

message GetPaymentUserResponse {
  PaymentUser payment_user = 1;
}

message UpdatePaymentUserRequest {
  optional string display_name = 1;
  optional string link = 2;
}

message UpdatePaymentUserResponse {
  PaymentUser payment_user = 1;
}

message GetPaymentHistoriesRequest {}

message GetPaymentHistoriesResponse {
  repeated PaymentHistory payment_histories = 1;
}

message GetSubscriptionPlansRequest {}

message GetSubscriptionPlansResponse {
  repeated SubscriptionPlan subscription_plans = 1;
}

message GetSubscriptionRequest {}

message GetSubscriptionResponse {
  Subscription subscription = 1;
}

message UnsubscribeRequest {
  string id = 1;
}

message UnsubscribeResponse {}

message GetTotalAmountRequest {}

message GetTotalAmountResponse {
  int32 total_amount = 1;
}

message GetContributorsRequest {}

message GetContributorsResponse {
  repeated Contributor contributors = 1;
}
